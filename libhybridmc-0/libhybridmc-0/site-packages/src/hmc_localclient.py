from dolfin import solve
from dolfin import DirichletBC
from dolfin import Expression
from dolfin import Function

import hmc_toolbox as tools
import numpy as np

class LocalClient():
    def __init__(self,*args,**kwargs):
        self.is_local = True
        self.subdomains = []

    # def main_dso(self,*args,**kwargs):
    #     value = core.main_dso(*args)
    #     return value

    def montecarlo(self,V,interface,**kwargs):
        import _hybridmc as core

        dims = kwargs.get('Omega')
        bc = DirichletBC(V,1.0,interface)
        coords, keys = tools.get_boundary_coords(bc)
        dim = len(dims)
        nof_nodes = len(coords)/dim
        D = np.array(dims, dtype=np.float_)
        node_coord = np.array(coords, dtype=np.float_)

        f = kwargs.get('f')
        q = kwargs.get('q')
        walks = kwargs.get('walks',5000)
        btol = kwargs.get('btol',1e-13)
        threads = kwargs.get('threads',6)
        mpi_workers = kwargs.get('mpi_workers',0)

        OpenCL = kwargs.get('OpenCL',False)
        if OpenCL and not core.opencl:
            print "****    WARNING    **** : Module %s compiled without OpenCL supprt. Recompile with -DOPENCL_SUPPORT" %(__name__)
            print "****    WARNING    **** : Running multithread CPU version"
            OpenCL = False
        if not OpenCL:
            f = Expression(f)
            q = Expression(q)
        value = core.montecarlo(D,dim,node_coord,nof_nodes,f,q,
                                walks,btol,threads,mpi_workers)

        est = Function(V)
        est.vector()[keys] = value
        mcbc = DirichletBC(V,est,interface)
        return mcbc, est

    def register(self,subdomain):
        self.subdomains.append(subdomain)

    def create_session(self,**kwargs):
        import uuid
        self.session = str(uuid.uuid4())

    def send_interpolated_interfaces(self,**kwargs):
        return

    def solve_subdomains(self,**kwargs):
        # FIXME: do it on parallel
        for s in self.subdomains:
            solve(s.a == s.L, s.solution, s.bcs,solver_parameters=s.solver_params)
